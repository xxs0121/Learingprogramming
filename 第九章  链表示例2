#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct Student)
struct Student
{
	long num;
	float score;
	struct Student *next;
};
int n;
struct Student *creat(void)
{
	struct Student *head;
	struct Student *p1, *p2;
	n = 0;
	p1 = p2 = (struct Student *)malloc(LEN);
	scanf_s("%ld,%f", &p1->num, &p1->score);    //为p1结点赋初值，进入下面的while循环
	head = NULL;                        //先使头指针指向NULL，不指向结点
	while (p1->num != 0)          //读取的p1结点中的num成员的值不为0则继续本次循环
	{
		n = n + 1;
		if (n == 1)              //判断p1是否是第一个结点
			head = p1;        //p1是第一个结点，头指针指向p1
		else
			p2->next = p1;    //p2所指向的结点的next成员指向p1，即使p1所指向的结点连接在p2所指向的结点后面（p1指向新开辟的结点，p2指向链表最后的结点）
		p2 = p1;              //将p1结点起始地址赋给p2，使p2拥有原先p1的地址
		p1 = (struct Student *)malloc(LEN);  //为新的p1所指向的结点开辟内存空间
		scanf_s("%ld,%f", &p1->num, &p1->score);   //读取数据赋给p1所指向的结点
	}
	p2->next = NULL;    //p2所指向的结点的next成员值为NULL，即p2不再指向新的结点
	return(head);  //返回头指针，带回链表起始地址
};

void print(struct Student *head)            //声明print函数，形参为结构体指针
{
	struct Student *p;                        //定义结构体指针p
	printf("\nNow,These %d records are :\n",n);
	p = head;                                //p指向传入的实参head，即链表头指针，获取整个链表的初始地址
	if(head!=NULL)                           //如果链表非空，执行循环
		do
		{
			printf("%ld %5.1f\n", p->num, p->score);    //输出当前p所指向的结点的成员值
			p = p->next;                                //把当前结点中next成员所指向的地址赋给p，若p不是NULL继续循环
		} while (p != NULL);                   //当p指向结点时继续循环
}
int main()
{
	struct Student *head;
	head = creat();                //调用creat函数，主函数的结构体指针head获得creat函数返回的指针head
	print(head);                  //调用print函数，实参为结构体指针head
	return 0;
};