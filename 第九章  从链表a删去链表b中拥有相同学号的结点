#include<stdio.h>
#include<string.h>
#define LA 4
#define LB 5
struct student
{
	int num;
	char name[8];
	struct student *next;
}a[LA],b[LB];

int main()
{
	struct student a[LA] = { {101,"Wang"},{102,"Li"},{105,"Zhang"},{106,"Wei"} };
	struct student b[LB] = { {103,"Zhang"},{104,"Ma"},{105,"Chen"},{107,"Guo"},{108,"Liu"} };
	int i;
	struct student *p, *p1, *p2, *head1, *head2;

	head1 = a;
	head2 = b;
	printf("list A:\n");               //建立链表并输出链表
	for (p1 = head1, i = 1; i <= LA; i++)    //先使p1指向头指针
	{
		if (i < LA)                  
			p1->next = a + i;              //i<LA时让p1中的next元素指向下一个结构体
		else
			p1->next = NULL;               //i=LA时让p1中的next元素指向NULL，完成链表建立
		printf("%4d%8s\n", p1->num, p1->name);            //输出一个结点的数据
		if (i < LA)           
			p1 = p1->next;            //如果不是最后一个结点，使p1指向下一个结点
	}
	printf("\n list B:\n");
	for (p2 = head2, i = 1; i <= LB; i++)
	{
		if (i < LB)
			p2->next = b + i;
		else
			p2->next = NULL;
		printf("%4d%8s\n", p2->num, p2->name);
		if (i < LB)
			p2 = p2->next;
	}
	p1 = head1;               //p1指向链表a的头指针
	while (p1 != NULL)         //p1非空时执行循环
	{
		p2 = head2;               //p2指向链表b的头结点
		while ((p1->num != p2->num) && (p2->next != NULL))   //当p1中的num不等于p2中的num且p2下一个结点非空时执行循环
			p2 = p2->next;            //使p2指向下一个结点
		if (p1->num == p2->num)              //若p1中的num等于p2中的num执行以下语句
		{
			if (p1 == head1)                 //链表a当前结点为头结点时
				head1 = p1->next;            //使head1指向链表a第二个结点，即删除头结点
			else                             //如果不是第一个结点
			{
				p->next = p1->next;            //使p->next指向p1的下一个结点，即删除p1当前指向的结点
				p1 = p1->next;                 //p1指向下一个结点
			}
		}
		else                   //链表b没有与链表a中当前结点相同的学号
		{
			p = p1;
			p1 = p1->next;           //p1指向链表a中的下一个结点
		}
	}
	printf("\nresult:\n");                //输出已处理过的链表a中全部结点的数据
	p1 = head1;
	while (p1 != NULL)
	{
		printf("%4d%7s\n", p1->num, p1->name);
		p1 = p1->next;
	}
	return 0;
}